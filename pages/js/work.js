window.jQuery = window.$ = require('jquery');

(function IndexInit() {

	const {
		exec
	} = require('child_process');

	const bindEvents = require('./js/lib/bindEvents');

	const {
		stringToColor,
		stringToColorInverse
	} = require('../js/hexColorFromString');

	const commands = {
		code: 'C:\\Program Files\\Microsoft VS Code\\code',
		explorer: 'C:\\Windows\\explorer.exe',
		vs: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE\\devenv.exe'
	};

	const eventFunctions = {
		run: (ev, elem) => {
			const dataCommand = elem.getAttribute('data-command');
			const dataPath = elem.getAttribute('data-path');

			const command = commands[dataCommand] ? commands[dataCommand] : dataCommand;
			const path = dataPath;

			exec(`"${command}" "${path}"`);
		},
	};

	const timer = new Date();
	const worker = new Worker('./js/workers/workWorker.js');
	worker.onmessage = function handleWorkerMessage(ev) {
		console.log(ev);
		if (ev.data.command === 'getProjectTree') {
			console.log(new Date().getTime() - timer.getTime());
			handleGetProjectTree(ev);
		}
	}
	
	worker.postMessage({
		command: 'getProjectTree'
	});

	function handleGetProjectTree(ev) {
		const {
			unbranched,
			projectMap
		} = ev.data.result;

		const contentDiv = document.getElementById('autogenerated-div');

		let newContent = '';


		let branchCounter = 0;

		const preferredProjects = [
			'C:\\tfs\\elliottelectric_com',
			'C:\\tfs\\eesnet_com',
			'C:\\tfs\\common',
		];

		const sortByFilename = (a, b) => {
			const la = a[0].filename.toLowerCase();
			const lb = b[0].filename.toLowerCase();
			if (la > lb) {
				return 1;
			} else if (lb > la) {
				return -1;
			} else {
				return 0;
			}
		};

		const sortFileByFilename = (a, b) => {
			const la = a.filename.toLowerCase();
			const lb = b.filename.toLowerCase();
			if (la > lb) {
				return 1;
			} else if (lb > la) {
				return -1;
			} else {
				return 0;
			}
		};

		const addProjectCollectionToDom = (programs, projectPath) => {
			branchCounter++;
			const projectName = projectPath.substr(projectPath.lastIndexOf('\\') + 1);
			const projectPathLength = projectPath.length + 1;
			const branches = [];

			programs.sort(sortByFilename);

			programs[0].forEach(programBranch => {
				const trimmedPath = programBranch.pathToFile.substr(projectPathLength);
				const branchName = trimmedPath.substr(0, trimmedPath.indexOf('\\'));
				branches.push({
					name: branchName,
					path: programBranch.pathToFile.substr(0, projectPathLength + branchName.length)
				});
			});

			newContent += `<div class="button-tier">
			<a data-toggle="collapse" href="#branch-${branchCounter}" role="button" aria-expanded="${(branchCounter === 1).toString()}" aria-controls="branch-${branchCounter}"><h5 class="alert alert-info">${projectName}</h5></a>
			<div class="row collapse${branchCounter === 1 ? ' show' : ''}" id="branch-${branchCounter}" data-parent="#autogenerated-div">`;

			programs.forEach(program => {
				const programName = program[0].filename.substr(0, program[0].filename.lastIndexOf('.'));
				newContent += `<div class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2"><h3 class="small">${programName}</h3>`;

				let branchNameIndex = program[0].splitPath.length - 1;
				while (program[0].splitPath[branchNameIndex].toLowerCase() === program[1].splitPath[branchNameIndex].toLowerCase() && branchNameIndex > 0) {
					branchNameIndex--;
				}

				program.forEach(programBranch => {
					const branchName = programBranch.splitPath[branchNameIndex];
					const style = `color:#${stringToColor(branchName)};background:#${stringToColorInverse(branchName)};`;
					newContent += `<div class="btn-group">
							<button data-function="click:run" data-command="vs" data-path="${programBranch.fullPath}"
							 class="btn btn-secondary btn-sm border-dark" style="${style}">${branchName}</button>
							<button data-function="click:run" data-command="code" data-path="${programBranch.pathToFile}"
							 class="btn btn-secondary btn-sm border-dark" style="${style}"><i class="fas fa-code"></i></button>
							<button data-function="click:run" data-command="explorer" data-path="${programBranch.pathToFile}"
							 class="btn btn-secondary btn-sm border-dark" style="${style}"><i class="fas fa-folder-open"></i></button>
						</div>\n`;
				});
				newContent += '</div>\n';
			});

			newContent += '</div></div>';

		};

		const preferredMap = new Map();

		
		preferredProjects.forEach(p => {
			preferredMap.set(p, projectMap.get(p));
			projectMap.delete(p);
		});

		preferredMap.forEach(addProjectCollectionToDom);

		newContent += `<div class="button-tier clearfix"><a data-toggle="collapse" href="#branch-unbranched" role="button" aria-expanded="false" aria-controls="branch-unbranched"><h5 class="alert alert-info">Unbranched</h5></a>`;
		unbranched.sort(sortFileByFilename);
		unbranched.forEach(file => {
			const name = file.filename.substr(0, file.filename.lastIndexOf('.'));
			newContent += `<div class="float-left collapse" style="margin-right: 8px; margin-bottom: 8px;" id="branch-unbranched" data-parent="#autogenerated-div"><div class="btn-group">
			<button data-function="click:run" data-command="vs" data-path="${file.fullPath}"
			 class="btn btn-secondary btn-sm border-dark">${name}</button>
			<button data-function="click:run" data-command="explorer" data-path="${file.pathToFile}"
			 class="btn btn-secondary btn-sm border-dark"><i class="fas fa-folder-open"></i></button>
		</div></div>\n`;
		});
		newContent += '</div>';

		projectMap.forEach(addProjectCollectionToDom);

		contentDiv.innerHTML = newContent;

		bindEvents(contentDiv, eventFunctions);

	}

	document.addEventListener('DOMContentLoaded', () => {

		const gitButton = document.getElementById('git-button');
		const gitCheck = require('../js/gitCheck.js');
		let changeGit;
		if (gitCheck()) {
			gitButton.innerHTML += 'off';
			changeGit = false;
		} else {
			gitButton.innerHTML += 'on';
			changeGit = true;
		}
		gitButton.addEventListener('click', () => {
			const gitToggle = require('../js/gitToggle.js');
			gitToggle(changeGit, () => window.location.reload());
		});

		bindEvents(document, eventFunctions);
	});

}());